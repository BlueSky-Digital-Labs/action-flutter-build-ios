name: flutter-build-ios
description: Setups the environment to build ios apps with flutter
branding:
  icon: box
  color: green
  
inputs:
  working-directory:
    description: The root directory of the Flutter app within this repository
    default: ./
  build-cmd:
    description: The full build command, can be used to add arguments
    default: flutter build ipa --release
  flutterfire:
    description: Whether this project uses FlutterFire (needed because FlutterFire CLI adds a post-build script)
    required: false
    default: "true"
  apple-id:
    description: Your Apple ID (email)
    required: true
  apple-id-password:
    description: The app-specific password (use GitHub Secrets for security)
    required: true
  scheme:
    description: Xcode build scheme
    required: false
    default: Runner
  export-options-plist:
    description: Export options plist file name
    required: false
    default: GithubActionsExportOptions.plist


runs:
  using: "composite"
  steps:

    - name: Check flutter found
      id: check_flutter
      shell: bash
      run: |
        if flutter doctor; then
            echo "installed=true" >> "$GITHUB_OUTPUT"
        else
            echo "installed=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Setup flutter
      if: steps.check_flutter.outputs.installed == 'false'
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        cache: true

    # this is needed because flutterfire cli adds a post build script and we want to support apps with flutterfire installed
    - name: Activate flutterfire
      if: ${{ inputs.flutterfire == 'true' }}
      run: dart pub global activate flutterfire_cli 0.3.0-dev.19 --overwrite
      shell: bash

    - name: Cache Provisioning Profiles
      uses: actions/cache@v3
      id: cache-profiles
      with:
        path: ~/Library/MobileDevice/Provisioning Profiles
        key: ios-profiles

    - name: Authenticate with Apple Developer Account
      if: steps.cache-profiles.outputs.cache-hit != 'true'
      env:
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_ID_PASSWORD: ${{ inputs.apple-id-password }}
      run: |
        echo "Authenticating with Apple Developer Account..."
        xcrun altool --list-providers -u "$APPLE_ID" -p "$APPLE_ID_PASSWORD"
      shell: bash

    - name: Download Provisioning Profiles
      if: steps.cache-profiles.outputs.cache-hit != 'true'
      env:
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_ID_PASSWORD: ${{ inputs.apple-id-password }}
      run: |
        echo "Downloading provisioning profiles..."
        security create-keychain -p "" ios-build.keychain
        security list-keychains -s ios-build.keychain
        security unlock-keychain -p "" ios-build.keychain
      working-directory: ${{ inputs.working-directory }}/ios
      shell: bash        

    - name: Build flutter App 
      env:
        CI: true
      run: |
        echo "Running the flutter build command..."
        ${{ inputs.build-cmd }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
