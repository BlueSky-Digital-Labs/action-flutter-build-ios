name: flutter-build-ios
description: Setups the environment to build ios apps with flutter
branding:
  icon: box
  color: green
  
inputs:
  working-directory:
    description: The root directory of the flutter app within this repository
    default: ./
  build-cmd:
    description: The full build command, can be used to add arguments
    default: flutter build ipa --release
  flutterfire:
    description: "Whether this project uses flutterfire, this is needed because flutterfire cli adds a post build script..."
    required: false
    default: "true" # we'll setup flutter fire just in case
  apple-id:
    description: "Your Apple ID (email)"
    required: true
  apple-id-password:
    description: "The app-specific password"
    required: true


runs:
  using: "composite"
  steps:

    - name: Check flutter found
      id: check_flutter
      shell: bash
      run: |
        if flutter doctor; then
            echo "installed=true" >> "$GITHUB_OUTPUT"
        else
            echo "installed=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Setup flutter
      if: steps.check_flutter.outputs.installed == 'false'
      uses: subosito/flutter-action@v2
      with:
        channel: "stable"
        cache: true

    # this is needed because flutterfire cli adds a post build script and we want to support apps with flutterfire installed
    - name: Activate flutterfire
      if: ${{ inputs.flutterfire == 'true' }}
      run: dart pub global activate flutterfire_cli 0.3.0-dev.19 --overwrite
      shell: bash

    - name: Cache Provisioning Profiles
      uses: actions/cache@v3
      id: cache-profiles
      with:
        path: ~/Library/MobileDevice/Provisioning Profiles
        key: ios-profiles

    - name: Authenticate with Apple Developer Account
      if: steps.cache-profiles.outputs.cache-hit != 'true'
      env:
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_ID_PASSWORD: ${{ inputs.apple-id-password }}
      run: |
        echo "Authenticating with Apple Developer Account..."
        xcrun altool --list-providers -u "$APPLE_ID" -p "$APPLE_ID_PASSWORD"
      shell: bash

    - name: Download Provisioning Profiles
      if: steps.cache-profiles.outputs.cache-hit != 'true'
      env:
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_ID_PASSWORD: ${{ inputs.apple-id-password }}
      run: |
        echo "Downloading provisioning profiles..."
        security create-keychain -p "" ios-build.keychain
        security list-keychains -s ios-build.keychain
        security unlock-keychain -p "" ios-build.keychain

        xcodebuild -allowProvisioningUpdates -resolvePackageDependencies
      working-directory: ${{ inputs.working-directory }}/ios
      shell: bash

    # fake step so the provisioning profile is correctly configured
    - name: Setup provisioning profiles
      shell: bash
      env:
        CI: true
        APPLE_ID: ${{ inputs.apple-id }}
        APPLE_ID_PASSWORD: ${{ inputs.apple-id-password }}
      continue-on-error: true
      working-directory: ${{ inputs.working-directory }}/ios
      run: |
        # Build the app, archive it, and export the IPA in one command sequence
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -sdk iphoneos \
          -allowProvisioningUpdates \
          -archivePath ${{ inputs.working-directory }}/build/ios/archive/Runner.xcarchive \
          clean archive && \
          
          # Export the IPA from the generated .xcarchive
          xcodebuild -exportArchive \
            -archivePath ${{ inputs.working-directory }}/build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/GithubActionsExportOptions.plist \
            -exportPath ${{ inputs.working-directory }}/build/ios/ipa \
            -allowProvisioningUpdates

            xcodebuild -allowProvisioningUpdates -resolvePackageDependencies
          shell: bash




    - name: Build iOS App without Signing
      env:
        CI: true
      run: |
        echo "Running the iOS build command without signing..."
        flutter build ipa --release --no-codesign --export-options-plist ios/GithubActionsExportOptions.plist -allowProvisioningUpdates
      shell: bash
      working-directory: ${{ inputs.working-directory }}
